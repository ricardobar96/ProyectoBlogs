{"ast":null,"code":"import Swal from 'sweetalert2';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nexport class AuthService {\n  constructor(router) {\n    this.router = router;\n    this.users = [{\n      username: 'Ricardo',\n      password: '12345678',\n      roles: ['ADMIN', 'USER']\n    }, {\n      username: 'usuario',\n      password: '12345678',\n      roles: ['USER']\n    }];\n    let storage = localStorage.getItem('currentUser');\n    if (storage) this.currentUser = JSON.parse(storage);\n  }\n  ngOnInit() {}\n  login(username, password) {\n    this.currentUser = this.users.find(u => u.username == username && u.password == password);\n    localStorage.setItem('currentUser', JSON.stringify(this.currentUser));\n    console.log(\"USUARIO DATOS: \" + this.currentRole);\n    this.userCheck = localStorage.getItem('currentUser');\n    return this.currentUser;\n  }\n  logout() {\n    const swalWithBootstrapButtons = Swal.mixin({\n      customClass: {\n        confirmButton: 'btn btn-success',\n        cancelButton: 'btn btn-danger'\n      },\n      buttonsStyling: false\n    });\n    swalWithBootstrapButtons.fire({\n      title: '¿quieres cerrar sesion?',\n      text: `¿Seguro que deseas cerrar sesion ?`,\n      icon: 'warning',\n      showCancelButton: true,\n      confirmButtonText: 'Logout',\n      cancelButtonText: 'Cancelar',\n      reverseButtons: true\n    }).then(result => {\n      if (result.isConfirmed) {\n        this.currentUser = null;\n        localStorage.clear;\n        this.router.navigate(['/login']);\n      }\n    });\n  }\n  isLoggedIn() {\n    if (this.userCheck != undefined) {\n      return true;\n    }\n    return false;\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.Router));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAKA,OAAOA,IAAI,MAAM,aAAa;;;AAK9B,OAAM,MAAOC,WAAW;EAUtBC,YAAoBC,MAAc;IAAd,WAAM,GAANA,MAAM;IALlB,UAAK,GAAG,CACd;MAACC,QAAQ,EAAE,SAAS;MAAEC,QAAQ,EAAE,UAAU;MAAEC,KAAK,EAAE,CAAC,OAAO,EAAE,MAAM;IAAC,CAAC,EACrE;MAACF,QAAQ,EAAE,SAAS;MAAEC,QAAQ,EAAE,UAAU;MAAEC,KAAK,EAAE,CAAC,MAAM;IAAC,CAAC,CAC7D;IAGC,IAAIC,OAAO,GAAGC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC;IACjD,IAAGF,OAAO,EAAE,IAAI,CAACG,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACL,OAAO,CAAC;EACpD;EAEAM,QAAQ,IAER;EAEAC,KAAK,CAACV,QAAgB,EAAEC,QAAgB;IACtC,IAAI,CAACK,WAAW,GAAG,IAAI,CAACK,KAAK,CAACC,IAAI,CAC/BC,CAAC,IAAKA,CAAC,CAACb,QAAQ,IAAIA,QAAQ,IAAIa,CAAC,CAACZ,QAAQ,IAAIA,QAAQ,CACxD;IAEDG,YAAY,CAACU,OAAO,CAAC,aAAa,EAAEP,IAAI,CAACQ,SAAS,CAAC,IAAI,CAACT,WAAW,CAAC,CAAC;IACrEU,OAAO,CAACC,GAAG,CAAC,iBAAiB,GAAG,IAAI,CAACC,WAAW,CAAC;IACjD,IAAI,CAACC,SAAS,GAAIf,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC;IACrD,OAAO,IAAI,CAACC,WAAW;EACzB;EAEAc,MAAM;IACJ,MAAMC,wBAAwB,GAAGzB,IAAI,CAAC0B,KAAK,CAAC;MAC1CC,WAAW,EAAE;QACXC,aAAa,EAAE,iBAAiB;QAChCC,YAAY,EAAE;OACf;MACDC,cAAc,EAAE;KACjB,CAAC;IAEFL,wBAAwB,CAACM,IAAI,CAAC;MAC5BC,KAAK,EAAE,yBAAyB;MAChCC,IAAI,EAAE,oCAAoC;MAC1CC,IAAI,EAAE,SAAS;MACfC,gBAAgB,EAAE,IAAI;MACtBC,iBAAiB,EAAE,QAAQ;MAC3BC,gBAAgB,EAAE,UAAU;MAC5BC,cAAc,EAAE;KACjB,CAAC,CAACC,IAAI,CAAEC,MAAM,IAAI;MACjB,IAAIA,MAAM,CAACC,WAAW,EAAE;QACtB,IAAI,CAAC/B,WAAW,GAAG,IAAI;QACvBF,YAAY,CAACkC,KAAK;QAClB,IAAI,CAACvC,MAAM,CAACwC,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;;IAEpC,CAAC,CAAC;EACJ;EAEAC,UAAU;IACR,IAAI,IAAI,CAACrB,SAAS,IAAIsB,SAAS,EAAC;MAC9B,OAAO,IAAI;;IAEX,OAAO,KAAK;EAChB;;AA7DW5C,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAA6C,SAAX7C,WAAW;EAAA8C,YAFV;AAAM","names":["Swal","AuthService","constructor","router","username","password","roles","storage","localStorage","getItem","currentUser","JSON","parse","ngOnInit","login","users","find","u","setItem","stringify","console","log","currentRole","userCheck","logout","swalWithBootstrapButtons","mixin","customClass","confirmButton","cancelButton","buttonsStyling","fire","title","text","icon","showCancelButton","confirmButtonText","cancelButtonText","reverseButtons","then","result","isConfirmed","clear","navigate","isLoggedIn","undefined","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\a895589\\curso_angular\\proyectoBlog\\src\\app\\form-login\\auth.service.ts"],"sourcesContent":["import { Injectable, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { User } from '../users/user';\nimport { Router } from '@angular/router';\nimport Swal from 'sweetalert2';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService implements OnInit{\n\n  private currentUser: any;\n  private userCheck:any;\n  private currentRole: any;\n  private users = [\n    {username: 'Ricardo', password: '12345678', roles: ['ADMIN', 'USER']},\n    {username: 'usuario', password: '12345678', roles: ['USER']},\n  ];\n\n  constructor(private router: Router) { \n    let storage = localStorage.getItem('currentUser');\n    if(storage) this.currentUser = JSON.parse(storage);\n  }\n\n  ngOnInit(): void {\n\n  }\n\n  login(username: string, password: string): any {\n    this.currentUser = this.users.find(\n      (u) => u.username == username && u.password == password\n    );\n\n    localStorage.setItem('currentUser', JSON.stringify(this.currentUser));\n    console.log(\"USUARIO DATOS: \" + this.currentRole);\n    this.userCheck =  localStorage.getItem('currentUser');\n    return this.currentUser;\n  }\n\n  logout() {\n    const swalWithBootstrapButtons = Swal.mixin({\n      customClass: {\n        confirmButton: 'btn btn-success',\n        cancelButton: 'btn btn-danger'\n      },\n      buttonsStyling: false\n    })\n    \n    swalWithBootstrapButtons.fire({\n      title: '¿quieres cerrar sesion?',\n      text: `¿Seguro que deseas cerrar sesion ?`,\n      icon: 'warning',\n      showCancelButton: true,\n      confirmButtonText: 'Logout',\n      cancelButtonText: 'Cancelar',\n      reverseButtons: true\n    }).then((result) => {\n      if (result.isConfirmed) {\n        this.currentUser = null;\n        localStorage.clear;\n        this.router.navigate(['/login']);\n      }\n    })\n  }\n\n  isLoggedIn():boolean {\n    if( this.userCheck != undefined){\n      return true;\n    }\n      return false;\n  }\n\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}