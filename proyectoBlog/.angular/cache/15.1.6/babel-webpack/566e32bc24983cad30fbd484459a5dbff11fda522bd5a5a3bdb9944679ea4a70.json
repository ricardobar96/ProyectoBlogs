{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { HttpHeaders } from '@angular/common/http';\nimport { map, catchError } from 'rxjs/operators';\nimport Swal from 'sweetalert2';\nimport { DatePipe } from '@angular/common';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class BlogService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.urlEndpoint = 'http://localhost:8080/api/v1/blogs';\n    this.httpHeaders = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n  }\n  getBlogs() {\n    return this.http.get(this.urlEndpoint).pipe(map(response => {\n      let blogs = response;\n      return blogs.map(blog => {\n        let datePipe = new DatePipe('en');\n        blog.date = datePipe.transform(blog.date, 'EEEE dd, MMMM yyyy');\n        return blog;\n      });\n    }));\n  }\n  create(blog) {\n    return this.http.post(this.urlEndpoint, blog, {\n      headers: this.httpHeaders\n    }).pipe(map(response => response.blog), catchError(e => {\n      if (e.status == 400) {\n        return throwError(e);\n      }\n      Swal.fire('Error al crear blog', 'No ha sido posible insertar el blog en la base de datos', 'error');\n      return throwError(e);\n    }));\n  }\n  getBlog(id) {\n    return this.http.get(`${this.urlEndpoint}/${id}`).pipe(catchError(e => {\n      this.router.navigate(['/blogs']);\n      Swal.fire('Error al editar', 'No existe el blog en la base de datos', 'error');\n      return throwError(e);\n    }));\n  }\n  update(blog) {\n    return this.http.put(`${this.urlEndpoint}/${blog.id}`, blog, {\n      headers: this.httpHeaders\n    }).pipe(catchError(e => {\n      if (e.status == 400) {\n        return throwError(e);\n      }\n      Swal.fire('Error al editar blog', 'No ha sido posible editar el blog en la base de datos', 'error');\n      return throwError(e);\n    }));\n  }\n  delete(id) {\n    return this.http.delete(`${this.urlEndpoint}/${id}`, {\n      headers: this.httpHeaders\n    }).pipe(catchError(e => {\n      Swal.fire('Error al eliminar blog', 'No ha sido eliminar insertar el blog de la base de datos', 'error');\n      return throwError(e);\n    }));\n  }\n}\nBlogService.ɵfac = function BlogService_Factory(t) {\n  return new (t || BlogService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n};\nBlogService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: BlogService,\n  factory: BlogService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["throwError","HttpHeaders","map","catchError","Swal","DatePipe","BlogService","constructor","http","router","getBlogs","get","urlEndpoint","pipe","response","blogs","blog","datePipe","date","transform","create","post","headers","httpHeaders","e","status","fire","getBlog","id","navigate","update","put","delete","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\a895589\\curso_angular\\proyectoBlog\\src\\app\\blogs\\blog.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Blog } from './blog';\nimport { of, Observable, throwError } from 'rxjs';\nimport { HttpClient, HttpHeaders } from '@angular/common/http'\nimport { map, catchError, tap } from 'rxjs/operators';\nimport { Router } from '@angular/router';\nimport Swal from 'sweetalert2';\nimport { DatePipe, registerLocaleData } from '@angular/common';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BlogService {\n\n  private urlEndpoint: string = 'http://localhost:8080/api/v1/blogs';\n\n  private httpHeaders = new HttpHeaders({'Content-Type': 'application/json'})\n  constructor(private  http: HttpClient, private router: Router) { }\n\n  getBlogs(): Observable<Blog[]> {\n    return this.http.get<Blog[]>(this.urlEndpoint).pipe(\n      map( response => {\n        let blogs = response as Blog[];\n        return blogs.map(blog => {\n          \n          let datePipe = new DatePipe('en');\n          blog.date = datePipe.transform(blog.date, 'EEEE dd, MMMM yyyy');\n          return blog;\n        });\n      }\n      ),\n    );\n  }\n\n  create(blog: Blog) : Observable<Blog> {\n    return this.http.post<Blog>(this.urlEndpoint, blog, {headers: this.httpHeaders}).pipe(\n      map((response: any) => response.blog as Blog),\n      catchError(e => {\n\n        if(e.status == 400) {\n          return throwError(e);\n        }\n\n        Swal.fire('Error al crear blog', 'No ha sido posible insertar el blog en la base de datos', 'error');\n        return throwError(e);\n      })\n    ); \n  }\n\n  getBlog(id: any): Observable<Blog> {\n    return this.http.get<Blog>(`${this.urlEndpoint}/${id}`).pipe(\n      catchError(e => {\n        this.router.navigate(['/blogs']);\n        Swal.fire('Error al editar', 'No existe el blog en la base de datos', 'error');\n        return throwError(e);\n      })\n    );\n  }\n\n  update(blog: Blog): Observable<Blog> {\n    return this.http.put<Blog>(`${this.urlEndpoint}/${blog.id}`, blog, {headers: this.httpHeaders}).pipe(\n      catchError(e => {\n\n        if(e.status == 400) {\n          return throwError(e);\n        }\n        \n        Swal.fire('Error al editar blog', 'No ha sido posible editar el blog en la base de datos', 'error');\n        return throwError(e);\n      })\n    ); \n  }\n\n  delete(id: any): Observable<Blog> {\n    return this.http.delete<Blog>(`${this.urlEndpoint}/${id}`, {headers: this.httpHeaders}).pipe(\n      catchError(e => {\n        Swal.fire('Error al eliminar blog', 'No ha sido eliminar insertar el blog de la base de datos', 'error');\n        return throwError(e);\n      })\n    ); \n  }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}